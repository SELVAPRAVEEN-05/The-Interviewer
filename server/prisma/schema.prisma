// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gender {
  id    Int @id @default(autoincrement())
  value String @unique

  users User[]
}

model Country {
  id       Int @id @default(autoincrement())
  name     String @unique
  iso_code String
  users     User[]
  institutes Institute[]
}

model Language {
  id       Int @id @default(autoincrement())
  name     String @unique
  iso_code String

  users User[]
}

model EducationLevel {
  id         Int @id @default(autoincrement())
  level_name String @unique

  educationDetails EducationDetail[]
}

model Institute {
  id        Int @id @default(autoincrement())
  name      String @unique
  city      String
  state     String
  email    String @default("")
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])

  educationDetails EducationDetail[]
}

model Skill {
  id       Int @id @default(autoincrement())
  name     String @unique
  category String

  userSkills UserSkill[]
}

model User {
  id                String @id @default(uuid())
  // username          String 
  first_name        String?
  last_name         String?
  email             String @unique
  password          String
  mobile_number     String
  date_of_birth     DateTime? 
  genderId          Int
  countryId         Int
  languageId        Int
  role              String
  github_url        String
  linkedin_url      String
  portfolio_url     String? 
  profile_url       String?
  yoe              Int @default(0)
  resume_url        String
  profile_picture_url String
  created_at        DateTime @default(now())
  status           String   @default("APPROVED")
  gender   Gender   @relation(fields: [genderId], references: [id])
  country  Country  @relation(fields: [countryId], references: [id])
  language Language @relation(fields: [languageId], references: [id])

  educationDetails EducationDetail[]
  userSkills       UserSkill[]
  Interview        Interview[]
  interviewParticipations InterviewParticipant[]
  codeSubmissions  CodeSubmission[]
  userPositions    UserPosition[]
  feedbackGiven    Feedback[] @relation("FeedbackGivenBy")
  feedbackReceived Feedback[] @relation("FeedbackGivenTo")
}

model EducationDetail {
  id                String @id @default(uuid())
  userId            String
  educationLevelId  Int
  instituteId       Int?
  specialization    String?
  board_or_university String?
  marks_obtained    Decimal? @db.Decimal(5, 2)
  max_marks         Decimal? @db.Decimal(5, 2)
  year_of_passing   Int?

  user            User            @relation(fields: [userId], references: [id])
  educationLevel  EducationLevel  @relation(fields: [educationLevelId], references: [id])
  institute       Institute?       @relation(fields: [instituteId], references: [id])
}

model UserSkill {
  id                 String @id @default(uuid())
  userId             String
  skillId            Int
  proficiency        String?
  years_of_experience Int?

  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])
}

model Interview {
  id           String   @id @default(uuid())
  scheduled_at DateTime
  status       String   @default("SCHEDULED")
  session_link String
  interviewerId String
  duration     Int      @default(30)
  type          String   @default("Technical")
  name       String?    @default("Technical Interview")
  prize        Decimal? @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  participants    InterviewParticipant[]
  codeSubmissions CodeSubmission[]
  feedbacks       Feedback[]
  user      User      @relation(fields: [interviewerId], references: [id])
}

model InterviewParticipant {
  id         String   @id @default(uuid())
  interviewId String
  userId     String
  sortlisted Boolean  @default(false)
  role       String
  joined_at  DateTime?
  left_at    DateTime?
  note       String?
  
  interview Interview @relation(fields: [interviewId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model CodeSubmission {
  id           String   @id @default(uuid())
  interviewId  String
  userId       String
  language     String
  code         String
  submitted_at DateTime @default(now())

  interview Interview @relation(fields: [interviewId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Brand {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  website_url String
  industry   String
  created_at DateTime @default(now())

  userPositions UserPosition[]
}

model Position {
  id         Int      @id @default(autoincrement())
  title      String   @unique
  level      String
  department String
  created_at DateTime @default(now())

  userPositions UserPosition[]
}

model UserPosition {
  id         String   @id @default(uuid())
  brandId    Int
  userId     String
  positionId Int
  location   String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  brand      Brand    @relation(fields: [brandId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])
}

model Feedback {
  id               String   @id @default(uuid())
  interviewId      String
  given_by_user_id String
  given_to_user_id String
  rating           Int
  score            Int
  systemDesign     Int   @default(0)
  problemSolving   Int    @default(0)
  communication    Int    @default(0)
  algorithm        Int    @default(0)
  sql              Int    @default(0)
  comments         String
  created_at       DateTime @default(now())

  interview Interview @relation(fields: [interviewId], references: [id])
  givenBy   User      @relation("FeedbackGivenBy", fields: [given_by_user_id], references: [id])
  givenTo   User      @relation("FeedbackGivenTo", fields: [given_to_user_id], references: [id])
}